//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/InputManager/GameInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInputs"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""e921a917-4ced-4344-9611-a92a4f5bf2b2"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""4a76e7eb-bd8b-4bcd-8785-137b5be5bafb"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""NormalizeVector2"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""1610a4e6-481b-4b0b-9ed4-6c3ef541b094"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""9b07b302-ed79-4278-8313-2a94a31c5845"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""bd0a415f-4a19-47e2-a221-4e2ca447cfe6"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""32530842-31a6-46e9-a8be-349f760660d2"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5897101f-1b75-4640-a42f-354b8e25b910"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""34407a0d-aa65-45b2-97b8-17b917ed691d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""64a324c9-f404-4fb6-8656-b43a0493f252"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Hologram"",
            ""id"": ""7c9635e3-7aca-4f3e-b4d9-1bdb4b503b09"",
            ""actions"": [
                {
                    ""name"": ""CreateHologram"",
                    ""type"": ""Button"",
                    ""id"": ""1cecf814-7772-4f0f-92b6-30dab05e4eeb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ManipulateGravity"",
                    ""type"": ""Button"",
                    ""id"": ""059965d3-e7b5-43e5-8898-da0888df75a9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5cfaed2f-b4ae-4f7a-9862-40535491a5a4"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": ""Hold(duration=0.2,pressPoint=0.25)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CreateHologram"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""325c353d-de97-4adb-9b54-6422217bc2c2"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": ""Hold(duration=0.2,pressPoint=0.25)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CreateHologram"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b469aa9b-94f6-4b4c-8428-296961d9bc71"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": ""Hold(duration=0.2,pressPoint=0.25)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CreateHologram"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fece06ff-7ed9-4677-8f56-3908bdd77ee5"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": ""Hold(duration=0.2,pressPoint=0.25)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CreateHologram"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""69fb7dac-7d31-4ef7-95a1-c7b105bb2f99"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ManipulateGravity"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
        // Hologram
        m_Hologram = asset.FindActionMap("Hologram", throwIfNotFound: true);
        m_Hologram_CreateHologram = m_Hologram.FindAction("CreateHologram", throwIfNotFound: true);
        m_Hologram_ManipulateGravity = m_Hologram.FindAction("ManipulateGravity", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_Jump;
    public struct PlayerActions
    {
        private @GameInputs m_Wrapper;
        public PlayerActions(@GameInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @Jump => m_Wrapper.m_Player_Jump;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Hologram
    private readonly InputActionMap m_Hologram;
    private List<IHologramActions> m_HologramActionsCallbackInterfaces = new List<IHologramActions>();
    private readonly InputAction m_Hologram_CreateHologram;
    private readonly InputAction m_Hologram_ManipulateGravity;
    public struct HologramActions
    {
        private @GameInputs m_Wrapper;
        public HologramActions(@GameInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @CreateHologram => m_Wrapper.m_Hologram_CreateHologram;
        public InputAction @ManipulateGravity => m_Wrapper.m_Hologram_ManipulateGravity;
        public InputActionMap Get() { return m_Wrapper.m_Hologram; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HologramActions set) { return set.Get(); }
        public void AddCallbacks(IHologramActions instance)
        {
            if (instance == null || m_Wrapper.m_HologramActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HologramActionsCallbackInterfaces.Add(instance);
            @CreateHologram.started += instance.OnCreateHologram;
            @CreateHologram.performed += instance.OnCreateHologram;
            @CreateHologram.canceled += instance.OnCreateHologram;
            @ManipulateGravity.started += instance.OnManipulateGravity;
            @ManipulateGravity.performed += instance.OnManipulateGravity;
            @ManipulateGravity.canceled += instance.OnManipulateGravity;
        }

        private void UnregisterCallbacks(IHologramActions instance)
        {
            @CreateHologram.started -= instance.OnCreateHologram;
            @CreateHologram.performed -= instance.OnCreateHologram;
            @CreateHologram.canceled -= instance.OnCreateHologram;
            @ManipulateGravity.started -= instance.OnManipulateGravity;
            @ManipulateGravity.performed -= instance.OnManipulateGravity;
            @ManipulateGravity.canceled -= instance.OnManipulateGravity;
        }

        public void RemoveCallbacks(IHologramActions instance)
        {
            if (m_Wrapper.m_HologramActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IHologramActions instance)
        {
            foreach (var item in m_Wrapper.m_HologramActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HologramActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public HologramActions @Hologram => new HologramActions(this);
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
    public interface IHologramActions
    {
        void OnCreateHologram(InputAction.CallbackContext context);
        void OnManipulateGravity(InputAction.CallbackContext context);
    }
}
